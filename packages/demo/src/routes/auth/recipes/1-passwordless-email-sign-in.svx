<script lang="ts">
  import { logOut, FirebaseUiAuth, updateUserData } from 'sveltefirets';
  import { user } from '$lib/user';
  import { Story } from 'kitbook';
  import Button from 'svelte-pieces/ui/Button.svelte';
</script>

<!-- prettier-ignore -->
# Passwordless Email Sign In Recipe

- First enable passwordless email authentication in the Firebase Console
- Add the `FirebaseUiAuth` component:

```svelte
<FirebaseUiAuth signInWith={{ emailPasswordless: true }} on:updateuserdata={(e) => updateUserData(e.detail.user, e.detail.isNewUser)} />
```

{#if $user}
  You are logged in and here is your **User** document from Firestore:

  <pre>{JSON.stringify($user, null, 1)}</pre>
  <Button form="filled" onclick={logOut}>Log Out</Button>
{:else}
  <Story name="Passwordless Email (French)" knobs={{continueUrl: ''}} let:props={{continueUrl}}>
    <FirebaseUiAuth
      languageCode="fr"
      {continueUrl}
      signInWith={{ emailPasswordless: true }}
      on:updateuserdata={(e) => updateUserData(e.detail.user, e.detail.isNewUser)} />
  </Story>
  <div />
{/if}

<!-- prettier-ignore -->
- Know that from whatever URL the user submits their email from, they will be returned to that same URL in a new tab after they click the link in their email, unless you pass in a route to the `continueUrl` prop, such as `\account`.
- Wherever you bring users back to, this page will need to automatically fire up the `FirebaseUiAuth` component which will check the url for the appropriate redirect parameters on init and automatically sign the user in if they exist. Note that the user will also then be authenticated in the original tab from which they entered their email.
- Alternatively, if you init `FirebaseUiAuth` lazily from a modal only when users ask to log in, you can also check and init FirebaseUiAuth in some fashion sort of like this:

```js
<script>
  import { isSignInWithEmailLink } from 'firebase/auth';
</script>
{#if isSignInWithEmailLink(window.location.href)}
  {#await import('sveltefirets/client/components/FirebaseUiAuth.svelte') then { default: FirebaseUiAuth }}
    <FirebaseUiAuth signInWith={{ emailPasswordless: true }} on:updateuserdata={(e) => updateUserData(e.detail.user, e.detail.isNewUser)} />
  {/await}
{/if}
```

See https://github.com/firebase/firebaseui-web#email-link-authentication for further documentation on this feature of FirebaseUi for Web.
